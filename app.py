import streamlit as st
import os
import re
import time
from langchain_openai import ChatOpenAI
from langchain.agents import AgentExecutor, create_openai_functions_agent
from langchain_core.prompts import ChatPromptTemplate
from dotenv import load_dotenv
from langchain.agents import Tool
from rag_tool import search_rag_database
from web_search_tool import search_ministere_web

load_dotenv()

#Initialisation de l'Agent RAG
@st.cache_resource
def setup_agent():
    tools = [
        Tool(
            name="search_rag_database",
            func=search_rag_database,
            description="""Recherche des informations dans la base de donn√©es RAG sur le budget et les finances. 
            Utile pour r√©pondre aux questions sur le contenu du document budg√©taire. 
            Prend une cha√Æne de caract√®res en entr√©e.""",
        ),
        Tool(
            name="search_ministere_web",
            func=search_ministere_web,
            description="""Effectue une recherche sur les sites officiels du gouvernement s√©n√©galais. 
            **Utiliser cet outil si l'information recherch√©e n'est pas trouv√©e dans la base de donn√©es interne (RAG).** Il est id√©al pour trouver des chiffres √† jour, des publications r√©centes, ou des documents qui ne sont pas dans le PDF de r√©f√©rence.""",
        )
    ]
    
    agent_prompt = ChatPromptTemplate.from_messages([
        ("system", """Tu es un assistant expert sur les finances publiques du S√©n√©gal. R√©ponds de mani√®re pr√©cise et compl√®te.
        Utilise tes outils pour trouver les informations n√©cessaires. **Si le premier outil de recherche interne ne trouve pas l'information, tu dois obligatoirement essayer d'utiliser l'outil de recherche web pour trouver la r√©ponse.**
        Si tu trouves des liens vers des sources pertinentes, int√®gre-les toujours dans la r√©ponse."""),
        ("human", "{input}"),
        ("placeholder", "{agent_scratchpad}"),
    ])
    
    llm = ChatOpenAI(model="gpt-4o", temperature=0)
    agent = create_openai_functions_agent(llm, tools, agent_prompt)
    
    return AgentExecutor(agent=agent, tools=tools, verbose=True)

agent_executor = setup_agent()

#Fonctions utilitaires
def extract_links_from_text(text):
    """Extrait les URL brutes d'une cha√Æne de texte."""
    url_pattern = r'(https?://[^\s\)]+)'
    links = re.findall(url_pattern, text)
    unique_links = sorted(list(set(links)))
    return unique_links

def handle_query(user_query):
    """Fonction pour g√©rer l'ex√©cution de la requ√™te et la mise √† jour de l'historique."""
    if user_query:
        # message de l'utilisateur √† l'historique
        st.session_state.messages.append({"role": "user", "content": user_query, "sources": [], "time": 0.0})
        
        with st.chat_message("user"):
            st.markdown(user_query)

        with st.chat_message("assistant"):
            with st.spinner("Recherche de la meilleure r√©ponse..."):
                try:
                    start_time = time.time()
                    response = agent_executor.invoke({"input": user_query})
                    end_time = time.time()
                    processing_time = end_time - start_time
                    
                    response_content = response['output']
                    links = extract_links_from_text(response_content)
                    
                    st.markdown(response_content)
                    if links:
                        st.markdown("---")
                        st.subheader("Sources :")
                        for link in links:
                            st.markdown(f"- [{link}]({link})")
                    
                    st.markdown(f"<p style='color:green; font-weight:bold; font-size:12px; font-style:italic;'>Temps de traitement : {processing_time:.2f} secondes</p>", unsafe_allow_html=True)

                    st.session_state.messages.append({"role": "assistant", "content": response_content, "sources": links, "time": processing_time})
                    
                except Exception as e:
                    st.error(f"Une erreur est survenue : {e}")
        
        # Effacer la question pr√©s√©lectionn√©e de l'√©tat de la session
        if 'preset_query' in st.session_state:
            del st.session_state.preset_query
            st.rerun()

#l'interface Streamlit
st.set_page_config(page_title="Assistant RAG Finances Publiques du S√©n√©gal", layout="wide")

st.title("Assistant RAG Finances Publiques du S√©n√©gal üá∏üá≥")
st.markdown("Posez-moi une question sur le budget et la politique financi√®re du S√©n√©gal.")

# Init de l'historique de la conversation
if "messages" not in st.session_state:
    st.session_state.messages = []

# questions pr√©-s√©lectionn√©es
preset_questions = [
    "Quel est le d√©ficit budg√©taire pr√©vu pour 2026 ?",
    "Quel est le site web officiel du minist√®re des Finances au S√©n√©gal ?",
    "Comment le budget pour 2027 a-t-il √©t√© √©labor√© et o√π puis-je trouver le document officiel ?",
    "Quelle est la diff√©rence entre les recettes et les d√©penses en 2026 ?",
    "O√π puis-je trouver les publications officielles du minist√®re de l'√âconomie ?"
]

st.markdown("---")

# Boutons pour les questions pr√©-s√©lectionn√©es
st.markdown("##### üöÄ Ou essayez l'une de ces questions :")
cols = st.columns(len(preset_questions))
for i, question in enumerate(preset_questions):
    if cols[i].button(question, key=f"q{i}"):
        st.session_state.preset_query = question

# Affichage des messages existants
for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])
        if message["sources"]:
            st.markdown("---")
            st.subheader("Sources :")
            for source in message["sources"]:
                st.markdown(f"- [{source}]({source})")
        if message["time"]:
            st.markdown(f"<p style='color:green; font-weight:bold; font-size:12px; font-style:italic;'>Temps de traitement : {message['time']:.2f} secondes</p>", unsafe_allow_html=True)

# Lancement du traitement si une question est pr√©-s√©lectionn√©e
if 'preset_query' in st.session_state and st.session_state.preset_query:
    handle_query(st.session_state.preset_query)

# Champ de saisie pour l'utilisateur (apr√®s l'historique)
user_query = st.chat_input("Votre question :")

if user_query:
    handle_query(user_query)